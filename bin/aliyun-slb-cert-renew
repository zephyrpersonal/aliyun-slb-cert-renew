#!/usr/bin/env node

require('dotenv').config()
const { resolve } = require('path')

const Core = require('@alicloud/pop-core')
const fs = require('fs-extra')
const { createClient } = require('../lib/client')

const { lb, key, cert, extraDomain } = require('minimist')(process.argv.slice(2))

const { ACCESS_KEY, ACCESS_SECRET, REGION = 'cn-hangzhou' } = process.env

const resolveFile = (path) => resolve(process.cwd(), path)

const updateCert = async (client, updatedServerCertificate, cert, key) => {
  if (updatedServerCertificate) {
    console.log('binded cert found')
    console.log('do renew')
  } else {
    console.log('no cert binded yet')
    console.log('set a new cert')
  }

  console.log('server cert start uploading')

  const certString = await fs.readFile(resolveFile(cert), 'utf8')

  console.log('load key file')
  const keyString = await fs.readFile(resolveFile(key), 'utf8')

  console.log('uploading server cert')

  const uploadedServerCert = await client.uploadServerCert({
    ServerCertificate: certString.replace(/^\s*\n/gm, ''),
    PrivateKey: keyString,
    ServerCertificateName: updatedServerCertificate
      ? updatedServerCertificate.ServerCertificateName
      : `cert-${new Date().getTime()}`,
    ResourceGroupId: updatedServerCertificate ? updatedServerCertificate.ResourceGroupId : 'rg-acfmztp7n2it5ta'
  })

  console.log('server cert uploaded successfully: ', uploadedServerCert.ServerCertificateId)

  return uploadedServerCert.ServerCertificateId
}

const run = async (opts) => {
  const client = createClient({ ACCESS_KEY, ACCESS_SECRET, REGION })

  console.log('fetching loadBalancer data')
  const lbInfo = await client.fetchLoadBalancer({ LoadBalancerId: lb })
  if (!lbInfo) throw new Error('lb not exist')

  console.log('fetching loadBalancer https listener')
  const httpsListener = await client.fetchHTTPSListener({ LoadBalancerId: lb, ListenerPort: 443 })

  if (extraDomain) {
    const domain = httpsListener.DomainExtensions?.DomainExtension?.find((domain) => domain.Domain === extraDomain)
    const { ServerCertificates } = await client.fetchServerCert({
      ServerCertificateId: domain.ServerCertificateId
    })
    console.log(ServerCertificates)

    const newCertId = await updateCert(client, ServerCertificates.ServerCertificate[0], cert, key)

    const updatedDomain = await client.updateExtraDomain({
      ServerCertificateId: newCertId,
      DomainExtensionId: domain.DomainExtensionId,
      RegionId: REGION
    })

    console.log('extra domain updated successfully: ', updatedDomain)

    if (ServerCertificates.ServerCertificate[0]) {
      console.log('remove old server cert')
      await client.deleteServerCert({
        ServerCertificateId: ServerCertificates.ServerCertificate[0].ServerCertificateId
      })
    }

    return
  }

  console.log('fetching server cert binded to loadBalancer https listener')
  const { ServerCertificates } = await client.fetchServerCert({
    ServerCertificateId: httpsListener.ServerCertificateId
  })

  const newCertId = await updateCert(client, ServerCertificates.ServerCertificate[0], cert, key)

  const updatedListener = await client.updateHTTPSListener({
    ListenerPort: 443,
    LoadBalancerId: lb,
    ServerCertificateId: newCertId
  })

  console.log('https listener updated successfully: ', updatedListener)

  if (ServerCertificates.ServerCertificate[0]) {
    console.log('remove old server cert')
    await client.deleteServerCert({
      ServerCertificateId: ServerCertificates.ServerCertificate[0].ServerCertificateId
    })
  }
}

run().catch((e) => {
  console.error(e)
  process.exit(1)
})
